/*******************************************************************************
 * Copyright (c) 2018, 2020 Kiel University and others.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/ 
package org.eclipse.elk.alg.rectpacking

import org.eclipse.elk.alg.rectpacking.RectPackingLayoutProvider
import org.eclipse.elk.alg.rectpacking.p1widthapproximation.WidthApproximationStrategy
import org.eclipse.elk.alg.rectpacking.p3whitespaceelimination.WhiteSpaceEliminationStrategy
import org.eclipse.elk.core.math.ElkPadding
import org.eclipse.elk.alg.rectpacking.p2packing.PackingStrategy

// BUNDLE
bundle {
    metadataClass options.RectPackingMetaDataProvider
    idPrefix org.eclipse.elk.rectpacking
}

// ALGORITHM
algorithm rectpacking(RectPackingLayoutProvider) {
    label "ELK Rectangle Packing"
    description
        "Algorithm for packing of unconnected boxes, i.e. graphs without edges. The given order of the boxes
        is always preserved and the main reading direction of the boxes is left to right. The algorithm is divided into
        two phases. One phase approximates the width in which the rectangles can be placed. The next phase places the rectangles
        in rows using the previously calculated width as bounding width and bundles rectangles with a similar height in blocks.
        A compaction step reduces the size of the drawing.
        Finally, the rectangles are expanded to fill their bounding box and eliminate empty unused spaces."
    documentation "@rectpacking.md"
    metadataClass options.RectPackingOptions
    supports org.eclipse.elk.aspectRatio = 1.3
    supports org.eclipse.elk.nodeSize.fixedGraphSize = false
    supports org.eclipse.elk.padding = new ElkPadding(15)
    supports org.eclipse.elk.spacing.nodeNode = 15
    supports org.eclipse.elk.contentAlignment
    // Common node micro layout
    supports org.eclipse.elk.nodeSize.constraints
    supports org.eclipse.elk.nodeSize.minimum
    supports org.eclipse.elk.nodeSize.options
    supports org.eclipse.elk.nodeLabels.placement
    supports org.eclipse.elk.omitNodeMicroLayout
    supports org.eclipse.elk.portLabels.placement
    supports widthApproximation.optimizationGoal
    supports widthApproximation.lastPlaceShift
    supports widthApproximation.targetWidth
    supports widthApproximation.strategy
    supports packing.strategy
    supports packing.compaction.rowHeightReevaluation
    supports packing.compaction.iterations
    supports whiteSpaceElimination.strategy
    supports org.eclipse.elk.interactive
    supports org.eclipse.elk.interactiveLayout
    supports desiredPosition
    supports currentPosition
    supports inNewRow
    supports trybox
}


/* ------------------------
 *    phase 1
 * ------------------------*/
group widthApproximation {

    option strategy: WidthApproximationStrategy {
        label "Width Approximation Strategy"
        description
            "Strategy for finding an initial width of the drawing."
        default = WidthApproximationStrategy.GREEDY
        targets parents
    }

    option targetWidth: double {
        label "Target Width"
        description
            "Option to place the rectangles in the given target width instead of approximating the width using the desired
             aspect ratio.
             The padding is not included in this. Meaning a drawing will have width of targetwidth +
             horizontal padding."
        targets parents
        default = -1
    }
    
    option optimizationGoal: OptimizationGoal {
        label "Optimization Goal"
        description
            "Optimization goal for approximation of the bounding box given by the first iteration. Determines whether layout is 
             sorted by the maximum scaling, aspect ratio, or area. Depending on the strategy the aspect ratio might be nearly ignored."
        documentation "@packingstrategy.md"
        targets parents
        default = OptimizationGoal.MAX_SCALE_DRIVEN
    }
    
    option lastPlaceShift: boolean {
        label "Shift Last Placed."
        description
            "When placing a rectangle behind or below the last placed rectangle in the first iteration, it is sometimes 
             possible to shift the rectangle further to the left or right, resulting in less whitespace. True (default) 
             enables the shift and false disables it. Disabling the shift produces a greater approximated area by the first 
             iteration and a layout, when using ONLY the first iteration (default not the case), where it is sometimes 
             impossible to implement a size transformation of rectangles that will fill the bounding box and eliminate 
             empty spaces."
        targets parents
        default = true
    }
}

/* ------------------------
 *    phase 2
 * ------------------------*/
group packing {

    option strategy: PackingStrategy {
        label "Compaction Strategy"
        description
            "Strategy for finding an initial placement on nodes."
        default = PackingStrategy.COMPACTION
        targets parents
    }
    
    group compaction {
        option rowHeightReevaluation: boolean {
            label "Row Height Reevaluation"
            description
                "During the compaction step the height of a row is normally not changed.
                 If this options is set, the blocks of other rows might be added if they exceed the row height.
                 If this is the case the whole row has to be packed again to be optimal regarding the new row height.
                 This option should, therefore, be used with care since it might be computation heavy."
            targets parents
            default = false
        }
        
        option iterations: int {
            label "Compaction iterations"
            description
                "Defines the number of compaction iterations. E.g. if set to 2 the width is initially approximated,
                 then the drawing is compacted and based on the resulting drawing the target width is decreased or
                 increased and a second compaction step is executed and the result compared to the first one. The best
                 run is used based on the scale measure."
            targets parents
            lowerBound = 1
            default = 1
        }
    }
}

/* ------------------------
 *    phase 3
 * ------------------------*/
group whiteSpaceElimination {

    option strategy: WhiteSpaceEliminationStrategy {
        label "White Space Approximation Strategy"
        description
            "Strategy for expanding nodes such that whitespace in the parent is eliminated."
        targets parents
    }
}

// OPTIONS

advanced option trybox: boolean {
    label "Try box layout first"
    description
        "Whether one should check whether the regions are stackable to see whether box layout would do the job.
         For example, nodes with the same height are not stackable inside a row. Therefore, box layout will perform
         better and faster."
    targets parents
    default = false
}

output option currentPosition: int {
    label "Current position of a node in the order of nodes"
    description
        "The rectangles are ordered. Normally according to their definition the the model.
         This option specifies the current position of a node."
    default = -1
    lowerBound = -1
    targets nodes
}

advanced option desiredPosition: int {
    label "Desired index of node"
    description
        "The rectangles are ordered. Normally according to their definition the the model.
         This option allows to specify a desired position that has preference over the original position."
    default = -1
    lowerBound = -1
    targets nodes
}

option inNewRow: boolean {
    label "In new Row"
    description
        "If set to true this node begins in a new row. Consequently this node cannot be moved in a previous layer during
         compaction. Width approximation does does not take this into account."
    targets nodes
    default = false
}
