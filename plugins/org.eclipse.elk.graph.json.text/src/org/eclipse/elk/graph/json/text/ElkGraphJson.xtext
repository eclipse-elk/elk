// automatically generated by Xtext
grammar org.eclipse.elk.graph.json.text.ElkGraph with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/elk/ElkGraph" 

ElkNode returns ElkNode:
    {ElkNode} '{'
        ('id' identifier=ID)
        ShapeLayout?
        Children?
    '}'
;

fragment Children returns ElkNode:
    '['
        children+=ElkNode (',' children+=ElkNode)*
    ']'
;

fragment ShapeLayout returns ElkShape:
    ShapeLayoutElements (',' ShapeLayoutElements)*
;  

fragment ShapeLayoutElements returns ElkShape:
    ('x' ':' x=Number)? | 
    ('y' ':' y=Number)? |
    ('width' ':' width=Number)? |
    ('height' ':' height=Number)? 
;

Number returns ecore::EDouble:
    SIGNED_INT | FLOAT;

terminal SIGNED_INT returns ecore::EInt:
    ('+'|'-')? INT;

terminal FLOAT returns ecore::EDouble: 
    ('+'|'-')? (INT '.' INT | INT ('.' INT)? ('e'|'E') ('+'|'-')? INT);


//ElkNode returns ElkNode:
//	'ElkNode'
//	'{'
//		('identifier' identifier=EString)?
//		'height' height=EDouble
//		'width' width=EDouble
//		'x' x=EDouble
//		'y' y=EDouble
//		('outgoingEdges' '(' outgoingEdges+=[ElkEdge|EString] ( "," outgoingEdges+=[ElkEdge|EString])* ')' )?
//		('incomingEdges' '(' incomingEdges+=[ElkEdge|EString] ( "," incomingEdges+=[ElkEdge|EString])* ')' )?
//		('properties' '{' properties+=ElkPropertyToValueMapEntry ( "," properties+=ElkPropertyToValueMapEntry)* '}' )?
//		('labels' '{' labels+=ElkLabel ( "," labels+=ElkLabel)* '}' )?
//		('ports' '{' ports+=ElkPort ( "," ports+=ElkPort)* '}' )?
//		('children' '{' children+=ElkNode ( "," children+=ElkNode)* '}' )?
//		('containedEdges' '{' containedEdges+=ElkEdge ( "," containedEdges+=ElkEdge)* '}' )?
//	'}';
//
//
//
//
//
//ElkConnectableShape returns ElkConnectableShape:
//	ElkNode | ElkPort;
//
//
//
//ElkPropertyToValueMapEntry returns ElkPropertyToValueMapEntry:
//	{ElkPropertyToValueMapEntry}
//	'ElkPropertyToValueMapEntry'
//	'{'
//		('key' key=IProperty)?
//		('value' value=PropertyValue)?
//	'}';
//
//ElkLabel returns ElkLabel:
//	'ElkLabel'
//	'{'
//		('identifier' identifier=EString)?
//		'height' height=EDouble
//		'width' width=EDouble
//		'x' x=EDouble
//		'y' y=EDouble
//		('text' text=EString)?
//		('properties' '{' properties+=ElkPropertyToValueMapEntry ( "," properties+=ElkPropertyToValueMapEntry)* '}' )?
//		('labels' '{' labels+=ElkLabel ( "," labels+=ElkLabel)* '}' )?
//	'}';
//
//EString returns ecore::EString:
//	STRING | ID;
//
//EDouble returns ecore::EDouble:
//	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
//
//ElkEdge returns ElkEdge:
//	{ElkEdge}
//	'ElkEdge'
//	'{'
//		('identifier' identifier=EString)?
//		('sources' '(' sources+=[ElkConnectableShape|EString] ( "," sources+=[ElkConnectableShape|EString])* ')' )?
//		('targets' '(' targets+=[ElkConnectableShape|EString] ( "," targets+=[ElkConnectableShape|EString])* ')' )?
//		('properties' '{' properties+=ElkPropertyToValueMapEntry ( "," properties+=ElkPropertyToValueMapEntry)* '}' )?
//		('labels' '{' labels+=ElkLabel ( "," labels+=ElkLabel)* '}' )?
//		('sections' '{' sections+=ElkEdgeSection ( "," sections+=ElkEdgeSection)* '}' )?
//	'}';
//
//ElkPort returns ElkPort:
//	'ElkPort'
//	'{'
//		('identifier' identifier=EString)?
//		'height' height=EDouble
//		'width' width=EDouble
//		'x' x=EDouble
//		'y' y=EDouble
//		('outgoingEdges' '(' outgoingEdges+=[ElkEdge|EString] ( "," outgoingEdges+=[ElkEdge|EString])* ')' )?
//		('incomingEdges' '(' incomingEdges+=[ElkEdge|EString] ( "," incomingEdges+=[ElkEdge|EString])* ')' )?
//		('properties' '{' properties+=ElkPropertyToValueMapEntry ( "," properties+=ElkPropertyToValueMapEntry)* '}' )?
//		('labels' '{' labels+=ElkLabel ( "," labels+=ElkLabel)* '}' )?
//	'}';
//
//IProperty returns IProperty:
//	'IProperty' /* TODO: implement this rule and an appropriate IValueConverter */;
//
//PropertyValue returns PropertyValue:
//	'PropertyValue' /* TODO: implement this rule and an appropriate IValueConverter */;
//
//ElkEdgeSection returns ElkEdgeSection:
//	{ElkEdgeSection}
//	'ElkEdgeSection'
//	'{'
//		('startX' startX=EDouble)?
//		('startY' startY=EDouble)?
//		('endX' endX=EDouble)?
//		('endY' endY=EDouble)?
//		('identifier' identifier=EString)?
//		('outgoingShape' outgoingShape=[ElkConnectableShape|EString])?
//		('incomingShape' incomingShape=[ElkConnectableShape|EString])?
//		('outgoingSections' '(' outgoingSections+=[ElkEdgeSection|EString] ( "," outgoingSections+=[ElkEdgeSection|EString])* ')' )?
//		('incomingSections' '(' incomingSections+=[ElkEdgeSection|EString] ( "," incomingSections+=[ElkEdgeSection|EString])* ')' )?
//		('properties' '{' properties+=ElkPropertyToValueMapEntry ( "," properties+=ElkPropertyToValueMapEntry)* '}' )?
//		('bendPoints' '{' bendPoints+=ElkBendPoint ( "," bendPoints+=ElkBendPoint)* '}' )?
//	'}';
//
//ElkBendPoint returns ElkBendPoint:
//	'ElkBendPoint'
//	'{'
//		'x' x=EDouble
//		'y' y=EDouble
//	'}';
